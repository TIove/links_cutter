// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.3
// source: cutter.proto

package cutter_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CutterClient is the client API for Cutter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CutterClient interface {
	Get(ctx context.Context, in *UrlRequest, opts ...grpc.CallOption) (*UrlResponse, error)
	Create(ctx context.Context, in *UrlRequest, opts ...grpc.CallOption) (*UrlResponse, error)
}

type cutterClient struct {
	cc grpc.ClientConnInterface
}

func NewCutterClient(cc grpc.ClientConnInterface) CutterClient {
	return &cutterClient{cc}
}

func (c *cutterClient) Get(ctx context.Context, in *UrlRequest, opts ...grpc.CallOption) (*UrlResponse, error) {
	out := new(UrlResponse)
	err := c.cc.Invoke(ctx, "/api.Cutter/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutterClient) Create(ctx context.Context, in *UrlRequest, opts ...grpc.CallOption) (*UrlResponse, error) {
	out := new(UrlResponse)
	err := c.cc.Invoke(ctx, "/api.Cutter/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CutterServer is the server API for Cutter service.
// All implementations must embed UnimplementedCutterServer
// for forward compatibility
type CutterServer interface {
	Get(context.Context, *UrlRequest) (*UrlResponse, error)
	Create(context.Context, *UrlRequest) (*UrlResponse, error)
	mustEmbedUnimplementedCutterServer()
}

// UnimplementedCutterServer must be embedded to have forward compatible implementations.
type UnimplementedCutterServer struct {
}

func (UnimplementedCutterServer) Get(context.Context, *UrlRequest) (*UrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCutterServer) Create(context.Context, *UrlRequest) (*UrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCutterServer) mustEmbedUnimplementedCutterServer() {}

// UnsafeCutterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CutterServer will
// result in compilation errors.
type UnsafeCutterServer interface {
	mustEmbedUnimplementedCutterServer()
}

func RegisterCutterServer(s grpc.ServiceRegistrar, srv CutterServer) {
	s.RegisterService(&Cutter_ServiceDesc, srv)
}

func _Cutter_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutterServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cutter/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutterServer).Get(ctx, req.(*UrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cutter_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutterServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cutter/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutterServer).Create(ctx, req.(*UrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cutter_ServiceDesc is the grpc.ServiceDesc for Cutter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cutter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Cutter",
	HandlerType: (*CutterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Cutter_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Cutter_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cutter.proto",
}
